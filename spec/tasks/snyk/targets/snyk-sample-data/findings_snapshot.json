["{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"brace-expansion@1.1.4 - Regular Expression Denial of Service (ReDoS)\",\"fingerprint\":\"731747d4594f8988106969bd3beab4dce6645e4f9ca9c7d9a443b5e5248c1c53\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/brace-expansion\\\" target=\\\"_blank\\\"><code>brace-expansion</code></a> is a package that performs brace expansion as known from sh/bash.\\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks.\\nRunning:\\n<code>js\\nconst expand = require(&#39;brace-expansion&#39;);\\nexpand(&#39;{,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\\\\n}&#39;)\\n</code>\\nWill hang for long periods of time.</p>\\n\\n<strong>Details</strong>\\n\\n<p>The Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack.  Many Regular Expression implementations may reach edge cases that causes them to work very slowly (exponentially related to input size), allowing an attacker to exploit this and can cause the program to enter these extreme situations by using a Regex string and cause the service to hang for a large periods of time.</p>\\n\\n<p>You can read more about <code>Regular Expression Denial of Service (ReDoS)</code> on our <a href=\\\"https://snyk.io/blog/redos-and-catastrophic-backtracking/\\\" target=\\\"_blank\\\">blog</a>.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>brace-expansion</code> to version 1.1.7 or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/juliangruber/brace-expansion/pull/35\\\" target=\\\"_blank\\\">Github PR</a></li>\\n<li><a href=\\\"https://github.com/juliangruber/brace-expansion/issues/33\\\" target=\\\"_blank\\\">Github Issue</a></li>\\n<li><a href=\\\"https://github.com/juliangruber/brace-expansion/pull/35/commits/b13381281cead487cbdbfd6a69fb097ea5e456c3\\\" target=\\\"_blank\\\">Github Commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->tap@5.8.0->nyc@6.6.1->glob@7.0.3->minimatch@3.0.0->brace-expansion@1.1.4<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->rimraf@2.5.2->glob@7.0.3->minimatch@3.0.0->brace-expansion@1.1.4<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->spawn-wrap@1.2.3->rimraf@2.5.2->glob@7.0.3->minimatch@3.0.0->brace-expansion@1.1.4<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->istanbul@0.4.3->fileset@0.2.1->minimatch@2.0.10->brace-expansion@1.1.4<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->istanbul@0.4.3->fileset@0.2.1->glob@5.0.15->minimatch@2.0.10->brace-expansion@1.1.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\ntap@5.8.0 -> tap@5.8.0\\nnyc@6.6.1 -> nyc@6.6.1\\nglob@7.0.3 -> glob@7.0.3\\nminimatch@3.0.0 -> minimatch@3.0.0\\nbrace-expansion@1.1.4 -> brace-expansion@1.1.7\\nrimraf@2.5.2 -> rimraf@2.5.2\\nspawn-wrap@1.2.3 -> spawn-wrap@1.2.3\\nistanbul@0.4.3 -> istanbul@0.4.3\\nfileset@0.2.1 -> fileset@0.2.1\\nminimatch@2.0.10 -> minimatch@2.0.10\\nglob@5.0.15 -> glob@5.0.15\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"ejs@1.0.0 - Remote Code Execution\",\"fingerprint\":\"19d3e609f7bef372b3b630a9faadaa3b3008c121fe63fc07790716d7d63a3b74\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/ejs\\\" target=\\\"_blank\\\"><code>ejs</code></a> is a popular JavaScript templating engine.\\nAffected versions of the package are vulnerable to <em>Remote Code Execution</em> by letting the attacker under certain conditions control the source folder from which the engine renders include files.\\nYou can read more about this vulnerability on the <a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk blog</a>.</p>\\n\\n<p>There&#39;s also a <a href=\\\"https://snyk.io/vuln/npm:ejs:20161130\\\" target=\\\"_blank\\\">Cross-site Scripting</a> &amp; <a href=\\\"https://snyk.io/vuln/npm:ejs:20161130-1\\\" target=\\\"_blank\\\">Denial of Service</a> vulnerabilities caused by the same behaviour. </p>\\n\\n<strong>Details</strong>\\n\\n<p><code>ejs</code> provides a few different options for you to render a template, two being very similar: <code>ejs.render()</code> and <code>ejs.renderFile()</code>. The only difference being that <code>render</code> expects a string to be used for the template and <code>renderFile</code> expects a path to a template file.</p>\\n\\n<p>Both functions can be invoked in two ways. The first is calling them with <code>template</code>, <code>data</code>, and <code>options</code>:\\n```js\\nejs.render(str, data, options);</p>\\n\\n<p>ejs.renderFile(filename, data, options, callback)\\n<code>\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\n</code>js\\nejs.render(str, dataAndOptions);</p>\\n\\n<p>ejs.renderFile(filename, dataAndOptions, callback)\\n```</p>\\n\\n<p>If used with a variable list supplied by the user (e.g. by reading it from the URI with <code>qs</code> or equivalent), an attacker can control <code>ejs</code> options. This includes the <code>root</code> option, which allows changing the project root for includes with an absolute path.  </p>\\n\\n<p><code>js\\nejs.renderFile(&#39;my-template&#39;, {root:&#39;/bad/root/&#39;}, callback);\\n</code></p>\\n\\n<p>By passing along the root directive in the line above, any includes would now be pulled from <code>/bad/root</code> instead of the path intended. This allows the attacker to take control of the root directory for included scripts and divert it to a library under his control, thus leading to remote code execution.</p>\\n\\n<p>The <a href=\\\"https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6\\\" target=\\\"_blank\\\">fix</a> introduced in version <code>2.5.3</code> blacklisted <code>root</code> options from options passed via the <code>data</code> object.</p>\\n\\n<strong>Disclosure Timeline</strong>\\n\\n<ul>\\n<li>November 27th, 2016 - Reported the issue to package owner.</li>\\n<li>November 27th, 2016 - Issue acknowledged by package owner.</li>\\n<li>November 28th, 2016 - Issue fixed and version <code>2.5.3</code> released.</li>\\n</ul>\\n\\n<strong>Remediation</strong>\\n\\n<p>The vulnerability can be resolved by either using the GitHub integration to <a href=\\\"https://snyk.io/org/projects\\\" target=\\\"_blank\\\">generate a pull-request</a> from your dashboard or by running <code>snyk wizard</code> from the command-line interface.\\nOtherwise, Upgrade <code>ejs</code> to version <code>2.5.3</code> or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk Blog</a></li>\\n<li><a href=\\\"https://github.com/mde/ejs/commit/3d447c5a335844b25faec04b1132dbc721f9c8f6\\\" target=\\\"_blank\\\">Fix commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->ejs@1.0.0<br>goof@0.0.3->ejs-locals@1.0.2->ejs@0.8.8\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nejs@1.0.0 -> ejs@2.5.3\\nejs-locals@1.0.2 -> false\\nejs@0.8.8 -> ejs@2.5.3\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"ejs@1.0.0 - Cross-site Scripting (XSS)\",\"fingerprint\":\"7f3b9e12a582777c833c838d683a61df2f2a4b1aef9c07aa95357cb123a5ef0a\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/ejs\\\" target=\\\"_blank\\\"><code>ejs</code></a> is a popular JavaScript templating engine.\\nAffected versions of the package are vulnerable to <em>Cross-site Scripting</em> by letting the attacker under certain conditions control and override the <code>filename</code> option causing it to render the value as is, without escaping it.\\nYou can read more about this vulnerability on the <a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk blog</a>.</p>\\n\\n<p>There&#39;s also a <a href=\\\"https://snyk.io/vuln/npm:ejs:20161128\\\" target=\\\"_blank\\\">Remote Code Execution</a> &amp; <a href=\\\"https://snyk.io/vuln/npm:ejs:20161130-1\\\" target=\\\"_blank\\\">Denial of Service</a> vulnerabilities caused by the same behaviour.</p>\\n\\n<strong>Details</strong>\\n\\n<p><code>ejs</code> provides a few different options for you to render a template, two being very similar: <code>ejs.render()</code> and <code>ejs.renderFile()</code>. The only difference being that <code>render</code> expects a string to be used for the template and <code>renderFile</code> expects a path to a template file.</p>\\n\\n<p>Both functions can be invoked in two ways. The first is calling them with <code>template</code>, <code>data</code>, and <code>options</code>:\\n```js\\nejs.render(str, data, options);</p>\\n\\n<p>ejs.renderFile(filename, data, options, callback)\\n<code>\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\n</code>js\\nejs.render(str, dataAndOptions);</p>\\n\\n<p>ejs.renderFile(filename, dataAndOptions, callback)\\n```</p>\\n\\n<p>If used with a variable list supplied by the user (e.g. by reading it from the URI with <code>qs</code> or equivalent), an attacker can control <code>ejs</code> options. This includes the <code>filename</code> option, which will be rendered as is when an error occurs during rendering. </p>\\n\\n<p><code>js\\nejs.renderFile(&#39;my-template&#39;, {filename:&#39;&lt;script&gt;alert(1)&lt;/script&gt;&#39;}, callback);\\n</code></p>\\n\\n<p>The <a href=\\\"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\\\" target=\\\"_blank\\\">fix</a> introduced in version <code>2.5.3</code> blacklisted <code>root</code> options from options passed via the <code>data</code> object.</p>\\n\\n<strong>Disclosure Timeline</strong>\\n\\n<ul>\\n<li>November 28th, 2016 - Reported the issue to package owner.</li>\\n<li>November 28th, 2016 - Issue acknowledged by package owner.</li>\\n<li>December 06th, 2016 - Issue fixed and version <code>2.5.5</code> released.</li>\\n</ul>\\n\\n<strong>Remediation</strong>\\n\\n<p>The vulnerability can be resolved by either using the GitHub integration to <a href=\\\"https://snyk.io/org/projects\\\" target=\\\"_blank\\\">generate a pull-request</a> from your dashboard or by running <code>snyk wizard</code> from the command-line interface.\\nOtherwise, Upgrade <code>ejs</code> to version <code>2.5.5</code> or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk Blog</a></li>\\n<li><a href=\\\"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\\\" target=\\\"_blank\\\">Fix commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->ejs@1.0.0<br>goof@0.0.3->ejs-locals@1.0.2->ejs@0.8.8\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nejs@1.0.0 -> ejs@2.5.5\\nejs-locals@1.0.2 -> false\\nejs@0.8.8 -> ejs@2.5.5\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"ejs@1.0.0 - Denial of Service (DoS)\",\"fingerprint\":\"214ac6fdafb603b61bac469508d8d6f08aed92f1fbbcea8c8351d9e5090274b7\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/ejs\\\" target=\\\"_blank\\\"><code>ejs</code></a> is a popular JavaScript templating engine.\\nAffected versions of the package are vulnerable to <em>Denial of Service</em> by letting the attacker under certain conditions control and override the <code>localNames</code> option causing it to crash.\\nYou can read more about this vulnerability on the <a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk blog</a>.</p>\\n\\n<p>There&#39;s also a <a href=\\\"https://snyk.io/vuln/npm:ejs:20161128\\\" target=\\\"_blank\\\">Remote Code Execution</a> &amp; <a href=\\\"https://snyk.io/vuln/npm:ejs:20161130\\\" target=\\\"_blank\\\">Cross-site Scripting</a> vulnerabilities caused by the same behaviour.</p>\\n\\n<strong>Details</strong>\\n\\n<p><code>ejs</code> provides a few different options for you to render a template, two being very similar: <code>ejs.render()</code> and <code>ejs.renderFile()</code>. The only difference being that <code>render</code> expects a string to be used for the template and <code>renderFile</code> expects a path to a template file.</p>\\n\\n<p>Both functions can be invoked in two ways. The first is calling them with <code>template</code>, <code>data</code>, and <code>options</code>:\\n```js\\nejs.render(str, data, options);</p>\\n\\n<p>ejs.renderFile(filename, data, options, callback)\\n<code>\\nThe second way would be by calling only the `template` and `data`, while `ejs` lets the `options` be passed as part of the `data`:\\n</code>js\\nejs.render(str, dataAndOptions);</p>\\n\\n<p>ejs.renderFile(filename, dataAndOptions, callback)\\n```</p>\\n\\n<p>If used with a variable list supplied by the user (e.g. by reading it from the URI with <code>qs</code> or equivalent), an attacker can control <code>ejs</code> options. This includes the <code>localNames</code> option, which will cause the renderer to crash.</p>\\n\\n<p><code>js\\nejs.renderFile(&#39;my-template&#39;, {localNames:&#39;try&#39;}, callback);\\n</code></p>\\n\\n<p>The <a href=\\\"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\\\" target=\\\"_blank\\\">fix</a> introduced in version <code>2.5.3</code> blacklisted <code>root</code> options from options passed via the <code>data</code> object.</p>\\n\\n<strong>Disclosure Timeline</strong>\\n\\n<ul>\\n<li>November 28th, 2016 - Reported the issue to package owner.</li>\\n<li>November 28th, 2016 - Issue acknowledged by package owner.</li>\\n<li>December 06th, 2016 - Issue fixed and version <code>2.5.5</code> released.</li>\\n</ul>\\n\\n<strong>Remediation</strong>\\n\\n<p>The vulnerability can be resolved by either using the GitHub integration to <a href=\\\"https://snyk.io/org/projects\\\" target=\\\"_blank\\\">generate a pull-request</a> from your dashboard or by running <code>snyk wizard</code> from the command-line interface.\\nOtherwise, Upgrade <code>ejs</code> to version <code>2.5.5</code> or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://snyk.io/blog/fixing-ejs-rce-vuln\\\" target=\\\"_blank\\\">Snyk Blog</a></li>\\n<li><a href=\\\"https://github.com/mde/ejs/commit/49264e0037e313a0a3e033450b5c184112516d8f\\\" target=\\\"_blank\\\">Fix commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->ejs@1.0.0<br>goof@0.0.3->ejs-locals@1.0.2->ejs@0.8.8\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nejs@1.0.0 -> ejs@2.5.5\\nejs-locals@1.0.2 -> false\\nejs@0.8.8 -> ejs@2.5.5\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"hawk@1.1.1 - Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"dad6d750fbbea7d8de2c527a61c8d135d3992944d2d39da6e2dbdf42abafa70c\",\"detail\":\"<strong>Overview</strong>\\n\\n<p>A <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">Regular expression Denial of Service (ReDoS)</a> vulnerability exists in <code>hawk</code> package, affecting version 4.1.0 and below.</p>\\n\\n<p>&quot;The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.&quot; <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">1</a></p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/hueniverse/hawk/issues/168\\\" target=\\\"_blank\\\">https://github.com/hueniverse/hawk/issues/168</a></li>\\n<li><a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->tap@5.8.0->codecov.io@0.1.6->request@2.42.0->hawk@1.1.1\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\ntap@5.8.0 -> false\\ncodecov.io@0.1.6 -> false\\nrequest@2.42.0 -> request@2.59.0\\nhawk@1.1.1 -> hawk@3.1.3\"},\"severity\":1,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"jquery@2.2.4 - Cross-site Scripting (XSS)\",\"fingerprint\":\"b84395c3877d8bf7efdbe48c62fb3b26ab7fae0a15f0ece2b954a1be37ba4e03\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/jquery\\\" target=\\\"_blank\\\"><code>jquery</code></a> is JavaScript library for DOM operations.</p>\\n\\n<p>Affected versions of the package are vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain ajax request is performed without the <code>dataType</code> option causing <code>text/javascript</code> responses to be executed.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>jquery</code> to version <code>3.0.0</code> or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/jquery/jquery/issues/2432\\\" target=\\\"_blank\\\">Github Issue</a></li>\\n<li><a href=\\\"https://github.com/jquery/jquery/pull/2588\\\" target=\\\"_blank\\\">Github PR</a></li>\\n<li><a href=\\\"https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2\\\" target=\\\"_blank\\\">Github Commit 3.0.0</a></li>\\n<li><a href=\\\"https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc\\\" target=\\\"_blank\\\">Github Commit 1.12</a></li>\\n<li><a href=\\\"https://github.com/jquery/jquery/blob/250a1990baa571de60325ab2c52eabb399c4cf9e/src/ajax/script.js#L18\\\" target=\\\"_blank\\\">Vulnerable code</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->jquery@2.2.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\njquery@2.2.4 -> jquery@3.0.0\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"jquery@2.2.4 - Denial of Service (DoS)\",\"fingerprint\":\"aa493c3b15e04202a4f5848e3696cb895d1759900bfc296ddf456393255f0cc0\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/jquery\\\" target=\\\"_blank\\\"><code>jquery</code></a> is JavaScript library for DOM operations.\\nAffected versions of the package are vulnerable to Denial of Service (DoS) due to removing a logic that lowercased attribute names. Any attribute getter using a mixed-cased name for boolean attributes goes into an infinite recursion, exceeding the stack call limit.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>jquery</code> to version 3.0.0 or higher.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/jquery/jquery/issues/3133\\\" target=\\\"_blank\\\">Github Issue</a></li>\\n<li><a href=\\\"https://github.com/jquery/jquery/pull/3134\\\" target=\\\"_blank\\\">Github Commit</a></li>\\n<li><a href=\\\"https://jsfiddle.net/shnann6y/2/\\\" target=\\\"_blank\\\">jsfiddle</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->jquery@2.2.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\njquery@2.2.4 -> jquery@3.0.0\"},\"severity\":1,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"marked@0.3.5 - Content & Code Injection (XSS)\",\"fingerprint\":\"70f946fa9eb5d2756217354e4f4ba837f0a5ad2e7d881f70effe18b256709ce9\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/marked\\\" target=\\\"_blank\\\"><code>marked</code></a> is a markdown parser and compiler used for rendering markdown content to html. It is vulnerable to content injection attack allowing the attacker to bypass its output sanitization (<code>sanitize: true</code>) protection. Using the <a href=\\\"https://www.w3.org/MarkUp/html-spec/html-spec_13.html#SEC13\\\" target=\\\"_blank\\\">HTML Coded Character Set</a>, attackers can inject <code>javascript:</code> code snippets into the output. For example, the following input <code>javascript&amp;#x58document;alert&amp;#40;1&amp;#41;</code>  will result in <code>alert(1)</code> being executed when the user clicks on the link.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>marked</code> to version 0.3.6 or higher.\\nAlso, you can patch the vulnerability using <a href=\\\"https://snyk.io/docs/using-snyk/#wizard\\\" target=\\\"_blank\\\">Snyk wizard</a>. Alternatively you can use <code>remarkable</code> or other markdown libraries.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/chjj/marked/pull/592\\\" target=\\\"_blank\\\">Github PR</a></li>\\n<li><a href=\\\"https://github.com/chjj/marked/pull/592/commits/2cff85979be8e7a026a9aca35542c470cf5da523\\\" target=\\\"_blank\\\">Github Commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->marked@0.3.5\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nmarked@0.3.5 -> marked@0.3.6\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"marked@0.3.5 - Cross-site Scripting (XSS) via Data URIs\",\"fingerprint\":\"271a0c62175aacd0f4915e6035c48c2bad3ab86b7eb1bda60a2bad882f8767a6\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/marked\\\" target=\\\"_blank\\\"><code>marked</code></a> is a markdown parser and compiler used for rendering markdown content to html.\\nAffected versions of the package allowed the use of <code>data:</code> URIs for all mime types by default potentially opening a door for Cross-site Scripting (XSS) attacks.</p>\\n\\n<strong>Details</strong>\\n\\n<p>Data URIs enable embedding small files in line in HTML documents, provided in the URL itself.\\nAttackers can craft malicious web pages containing either HTML or script code that utilizes the data URI scheme, allowing them to bypass access controls or steal sensitive information.</p>\\n\\n<p>An example of data URI used to deliver javascript code. The data holds <code>&lt;script&gt;alert(&#39;XSS&#39;)&lt;/script&gt;</code> tag in base64 encoded format.\\n<code>html\\n[xss link](data:text/html;base64,PHNjcmlwdD5hbGVydCgnWFNTJyk8L3NjcmlwdD4K)\\n</code></p>\\n\\n<strong>Remediation</strong>\\n\\n<p>The fix is merged to the master branch but not yet published to npm. We recommend patching it using <a href=\\\"https://snyk.io/docs/using-snyk/#wizard\\\" target=\\\"_blank\\\">Snyk wizard</a>.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/chjj/marked/commit/cd2f6f5b7091154c5526e79b5f3bfb4d15995a51\\\" target=\\\"_blank\\\">Github Commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->marked@0.3.5\",\"line\":null,\"code\":\"Upgrade Path:\\n\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"minimatch@3.0.0 - Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"e2259de24be4387ab6c810739e792fa6d455d2e53dc953a48b2aa0f471a8ed30\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/minimatch\\\" target=\\\"_blank\\\"><code>minimatch</code></a> is a minimalistic matching library used for converting glob expressions into JavaScript RegExp objects.</p>\\n\\n<p>An attacker can provide a long value to the <code>minimatch</code> function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).</p>\\n\\n<p>&quot;The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.&quot; <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">1</a></p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>minimatch</code> to version <code>3.0.2</code> or greater.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\\n<li><a href=\\\"https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955\\\" target=\\\"_blank\\\">https://github.com/isaacs/minimatch/commit/6944abf9e0694bd22fd9dad293faa40c2bc8a955</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->tap@5.8.0->nyc@6.6.1->glob@7.0.3->minimatch@3.0.0<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->rimraf@2.5.2->glob@7.0.3->minimatch@3.0.0<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->spawn-wrap@1.2.3->rimraf@2.5.2->glob@7.0.3->minimatch@3.0.0<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->istanbul@0.4.3->fileset@0.2.1->minimatch@2.0.10<br>goof@0.0.3->tap@5.8.0->nyc@6.6.1->istanbul@0.4.3->fileset@0.2.1->glob@5.0.15->minimatch@2.0.10\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\ntap@5.8.0 -> tap@5.8.0\\nnyc@6.6.1 -> nyc@6.6.1\\nglob@7.0.3 -> glob@7.0.3\\nminimatch@3.0.0 -> minimatch@3.0.2\\nrimraf@2.5.2 -> rimraf@2.5.2\\nspawn-wrap@1.2.3 -> spawn-wrap@1.2.3\\nistanbul@0.4.3 -> istanbul@0.4.5\\nistanbul@0.4.3 -> istanbul@0.4.3\\nfileset@0.2.1 -> fileset@0.2.1\\nglob@5.0.15 -> glob@5.0.15\\nminimatch@2.0.10 -> minimatch@3.0.2\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"moment@2.15.1 - Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"6db898cfa9252f14b0d548ff3d068d987449a38f93031f1d3b4394f1ff05455d\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/moment\\\" target=\\\"_blank\\\"><code>moment</code></a> is a lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates.</p>\\n\\n<p>Affected versions of the package are vulnerable to Regular Expression Denial of Service (ReDoS) attacks for any locale that has separate format and standalone options and <code>format</code> input can be controlled by the user.</p>\\n\\n<p>An attacker can provide a specially crafted input to the <code>format</code> function, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the event loop and preventing it from processing other requests and making the server unavailable (a Denial of Service attack).</p>\\n\\n<strong>Disclosure Timeline</strong>\\n\\n<ul>\\n<li>October 19th, 2016 - Reported the issue to package owner.</li>\\n<li>October 19th, 2016 - Issue acknowledged by package owner.</li>\\n<li>October 24th, 2016 - Issue fixed and version <code>2.15.2</code> released.</li>\\n</ul>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://gist.github.com/grnd/50192ce22681848a7de812d95241b7fc\\\" target=\\\"_blank\\\">Proof of concept</a></li>\\n<li><a href=\\\"https://github.com/moment/moment/commit/663f33e333212b3800b63592cd8e237ac8fabdb9\\\" target=\\\"_blank\\\">Fix commit</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->moment@2.15.1\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nmoment@2.15.1 -> moment@2.15.2\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"mongoose@4.2.4 - Remote Memory Exposure\",\"fingerprint\":\"e4cf2a5898791cdb77be3e3e9214621e4e330cf60e77aeae1db2be4c047fe976\",\"detail\":\"<strong>Overview</strong>\\n\\n<p>A potential memory disclosure vulnerability exists in mongoose.\\nA <code>Buffer</code> field in a MongoDB document can be used to expose sensitive\\ninformation such as code, runtime memory and user data into MongoDB.</p>\\n\\n<strong>Details</strong>\\n\\n<p>Initializing a <code>Buffer</code> field in a document with integer <code>N</code> creates a <code>Buffer</code>\\nof length <code>N</code> with non zero-ed out memory.\\n<strong>Example:</strong>\\n<code>\\nvar x = new Buffer(100); // uninitialized Buffer of length 100\\n// vs\\nvar x = new Buffer(&#39;100&#39;); // initialized Buffer with value of &#39;100&#39;\\n</code>\\nInitializing a MongoDB document field in such manner will dump uninitialized\\nmemory into MongoDB.\\nThe patch wraps <code>Buffer</code> field initialization in mongoose by converting a\\n<code>number</code> value <code>N</code> to array <code>[N]</code>, initializing the <code>Buffer</code> with <code>N</code> in its\\nbinary form.</p>\\n\\n<h4>Proof of concept</h4>\\n\\n<p>```javascript\\nvar mongoose = require(&#39;mongoose&#39;);\\nmongoose.connect(&#39;mongodb://localhost/bufftest&#39;);</p>\\n\\n<p>// data: Buffer is not uncommon, taken straight from the docs: <a href=\\\"http://mongoosejs.com/docs/schematypes.html\\\" target=\\\"_blank\\\">http://mongoosejs.com/docs/schematypes.html</a>\\nmongoose.model(&#39;Item&#39;, new mongoose.Schema({id: String, data: Buffer}));</p>\\n\\n<p>var Item = mongoose.model(&#39;Item&#39;);</p>\\n\\n<p>var sample = new Item();\\nsample.id = &#39;item1&#39;;</p>\\n\\n<p>// This will create an uninitialized buffer of size 100\\nsample.data = 100;\\nsample.save(function () {\\n    Item.findOne(function (err, result) {\\n        // Print out the data (exposed memory)\\n        console.log(result.data.toString(&#39;ascii&#39;))\\n        mongoose.connection.db.dropDatabase(); // Clean up everything\\n        process.exit();\\n    });\\n});\\n```</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>mongoose</code> to version &gt;= 3.8.39 or &gt;= 4.3.6.</p>\\n\\n<p>If a direct dependency update is not possible, use <a href=\\\"https://snyk.io/docs/using-snyk#wizard\\\" target=\\\"_blank\\\"><code>snyk wizard</code></a> to patch this vulnerability.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/Automattic/mongoose/issues/3764\\\" target=\\\"_blank\\\">Github Issue</a></li>\\n<li><a href=\\\"https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials\\\" target=\\\"_blank\\\">Blog: Node Buffer API fix</a></li>\\n<li><a href=\\\"https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md\\\" target=\\\"_blank\\\">Blog: Information about Buffer</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->mongoose@4.2.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nmongoose@4.2.4 -> mongoose@4.3.6\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"ms@0.6.2 - Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"b41f819a3f26ab137f80dad4780ff14c614418e8c21b25c8d0f996145abb80ef\",\"detail\":\"<strong>Overview</strong>\\n\\n<p>The <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">Regular expression Denial of Service (ReDoS)</a> vulnerability exists in the <code>ms</code> package, affecting version 0.7.0 and below.</p>\\n\\n<strong>Details</strong>\\n\\n<p><code>ms</code> is a milliseconds conversion utility, used to convert a time period string (i.e. <code>&quot;2 days&quot;</code>, <code>&quot;1h&quot;</code>) into milliseconds integer.\\nThe regular expression used by the function to parse the time is vulnerable to a denial of service attack, where extremely long strings passed to <code>ms()</code> can take a long time to process, subsequently blocking the event loop for that extended period.</p>\\n\\n<p>&quot;The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time.&quot; <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">1</a></p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>ms</code> to version 0.7.1. </p>\\n\\n<p>If direct dependency upgrade is not possible, use <a href=\\\"https://snyk.io/docs/using-snyk#wizard\\\" target=\\\"_blank\\\">snyk wizard</a> to patch this vulnerability.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->humanize-ms@1.0.1->ms@0.6.2\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nhumanize-ms@1.0.1 -> humanize-ms@1.0.2\\nms@0.6.2 -> ms@0.7.1\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"negotiator@0.4.9 - Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"e091c13f7dbb1273527995e1551e37c91623d500a7033d782e71200d8e578353\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://npmjs.org/package/negotiator\\\" target=\\\"_blank\\\"><code>negotiator</code></a> is an HTTP content negotiator for Node.js. Versions prior to <code>0.6.1</code> are vulnerable to <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">Regular expression Denial of Service (ReDoS)</a> attack when parsing &quot;Accept-Language&quot; http header.</p>\\n\\n<p>An attacker can provide a long value in the Accept-Language header, which nearly matches the pattern being matched. This will cause the regular expression matching to take a long time, all the while occupying the thread and preventing it from processing other requests. By repeatedly sending multiple such requests, the attacker can make the server unavailable (a Denial of Service attack).</p>\\n\\n<strong>Details</strong>\\n\\n<p>The Regular expression Denial of Service (ReDoS) is a Denial of Service attack, that exploits the fact that most Regular Expression implementations may reach extreme situations that cause them to work very slowly (exponentially related to input size). An attacker can then cause a program using a Regular Expression to enter these extreme situations and then hang for a very long time. [1]</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>negotiator</code> to to version <code>0.6.1</code> or greater.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\\n<li><a href=\\\"https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c\\\" target=\\\"_blank\\\">https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->errorhandler@1.2.0->accepts@1.1.4->negotiator@0.4.9<br>goof@0.0.3->st@0.2.4->negotiator@0.2.8<br>goof@0.0.3->express@4.12.4->accepts@1.2.13->negotiator@0.5.3\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nerrorhandler@1.2.0 -> errorhandler@1.4.3\\naccepts@1.1.4 -> accepts@1.3.3\\nnegotiator@0.4.9 -> negotiator@0.6.1\\nst@0.2.4 -> st@1.1.0\\nnegotiator@0.2.8 -> negotiator@0.6.1\\nexpress@4.12.4 -> express@4.14.0\\naccepts@1.2.13 -> accepts@1.3.3\\nnegotiator@0.5.3 -> negotiator@0.6.1\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"qs@2.2.4 - Prototype Override Protection Bypass\",\"fingerprint\":\"c64fd188b3a219fbacede22c3959ab6a2c21f6791549de74ff9a18dbfb08f9a0\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/qs\\\" target=\\\"_blank\\\"><code>qs</code></a> is a querystring parser that supports nesting and arrays, with a depth limit.</p>\\n\\n<p>By default <code>qs</code> protects against attacks that attempt to overwrite an object&#39;s existing prototype properties, such as <code>toString()</code>, <code>hasOwnProperty()</code>,etc.</p>\\n\\n<p>From <a href=\\\"https://github.com/ljharb/qs\\\" target=\\\"_blank\\\"><code>qs</code> documentation</a>:</p>\\n\\n<blockquote>\\n<p>By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.</p>\\n</blockquote>\\n\\n<p>Overwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.</p>\\n\\n<p>In versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with <code>[</code> or <code>]</code>. e.g. <code>qs.parse(&quot;]=toString&quot;)</code> will return <code>{toString = true}</code>, as a result, calling <code>toString()</code> on the object will throw an exception.</p>\\n\\n<p><strong>Example:</strong>\\n```js\\nqs.parse(&#39;toString=foo&#39;, { allowPrototypes: false })\\n// {}</p>\\n\\n<p>qs.parse(&quot;]=toString&quot;, { allowPrototypes: false })\\n// {toString = true} &lt;== prototype overwritten\\n```</p>\\n\\n<p>For more information, you can check out our <a href=\\\"https://snyk.io/blog/high-severity-vulnerability-qs/\\\" target=\\\"_blank\\\">blog</a>.</p>\\n\\n<strong>Disclosure Timeline</strong>\\n\\n<ul>\\n<li>February 13th, 2017 - Reported the issue to package owner.</li>\\n<li>February 13th, 2017 - Issue acknowledged by package owner.</li>\\n<li>February 16th, 2017 - Partial fix released in versions <code>6.0.3</code>, <code>6.1.1</code>, <code>6.2.2</code>, <code>6.3.1</code>.</li>\\n<li>March 6th, 2017     - Final fix released in versions <code>6.4.0</code>,<code>6.3.2</code>, <code>6.2.3</code>, <code>6.1.2</code> and <code>6.0.4</code></li>\\n</ul>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>qs</code> to version <code>6.4.0</code> or higher.\\n<strong>Note:</strong> The fix was backported to the following versions <code>6.3.2</code>, <code>6.2.3</code>, <code>6.1.2</code>, <code>6.0.4</code>.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d\\\" target=\\\"_blank\\\">Github Commit</a></li>\\n<li><a href=\\\"https://github.com/ljharb/qs/issues/200\\\" target=\\\"_blank\\\">Report of an insufficient fix</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->body-parser@1.9.0->qs@2.2.4<br>goof@0.0.3->express@4.12.4->qs@2.4.2<br>goof@0.0.3->tap@5.8.0->codecov.io@0.1.6->request@2.42.0->qs@1.2.2\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nbody-parser@1.9.0 -> body-parser@1.17.1\\nqs@2.2.4 -> qs@6.4.0\\nexpress@4.12.4 -> express@4.15.2\\nqs@2.4.2 -> qs@6.4.0\\ntap@5.8.0 -> false\\ncodecov.io@0.1.6 -> false\\nrequest@2.42.0 -> request@2.68.0\\nqs@1.2.2 -> qs@6.0.4\"},\"severity\":3,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"request@2.42.0 - Remote Memory Exposure\",\"fingerprint\":\"000b24a800e741d4315e54e742064c48a463d73cf2c1b47870903e9d9242a964\",\"detail\":\"<strong>Overview</strong>\\n\\n<p><a href=\\\"https://www.npmjs.com/package/request\\\" target=\\\"_blank\\\"><code>request</code></a> is a simplified http request client.\\nA potential remote memory exposure vulnerability exists in <code>request</code>. If a <code>request</code> uses a multipart attachment and the <em>body type</em> option is <code>number</code> with value X, then X bytes of uninitialized memory will be sent in the body of the request.</p>\\n\\n<p>Note that while the impact of this vulnerability is high (memory exposure), exploiting it is likely difficult, as the attacker needs to somehow control the body type of the request. One potential exploit scenario is when a request is composed based on JSON input, including the body type, allowing a malicious JSON to trigger the memory leak.</p>\\n\\n<strong>Details</strong>\\n\\n<p>Constructing a <code>Buffer</code> class with integer <code>N</code> creates a <code>Buffer</code>\\nof length <code>N</code> with non zero-ed out memory.\\n<strong>Example:</strong>\\n<code>\\nvar x = new Buffer(100); // uninitialized Buffer of length 100\\n// vs\\nvar x = new Buffer(&#39;100&#39;); // initialized Buffer with value of &#39;100&#39;\\n</code></p>\\n\\n<p>Initializing a multipart body in such manner will cause uninitialized memory to be sent in the body of the request.</p>\\n\\n<h4>Proof of concept</h4>\\n\\n<p>```javascript\\nvar http = require(&#39;http&#39;)\\nvar request = require(&#39;request&#39;)</p>\\n\\n<p>http.createServer(function (req, res) {\\n  var data = &#39;&#39;\\n  req.setEncoding(&#39;utf8&#39;)\\n  req.on(&#39;data&#39;, function (chunk) {\\n    console.log(&#39;data&#39;)\\n    data += chunk\\n  })\\n  req.on(&#39;end&#39;, function () {\\n    // this will print uninitialized memory from the client\\n    console.log(&#39;Client sent:\\\\n&#39;, data)\\n  })\\n  res.end()\\n}).listen(8000)</p>\\n\\n<p>request({\\n  method: &#39;POST&#39;,\\n  uri: &#39;<a href=\\\"http://localhost:8000\\\" target=\\\"_blank\\\">http://localhost:8000</a>&#39;,\\n  multipart: [{ body: 1000 }]\\n},\\nfunction (err, res, body) {\\n  if (err) return console.error(&#39;upload failed:&#39;, err)\\n  console.log(&#39;sent&#39;)\\n})\\n```</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade <code>request</code> to version 2.68.0 or higher.</p>\\n\\n<p>If a direct dependency update is not possible, use <a href=\\\"https://snyk.io/documentation/#wizard\\\" target=\\\"_blank\\\"><code>snyk wizard</code></a> to patch this vulnerability.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/request/request/pull/2018\\\" target=\\\"_blank\\\">Github PR</a></li>\\n<li><a href=\\\"https://github.com/ChALkeR/notes/blob/master/Lets-fix-Buffer-API.md#previous-materials\\\" target=\\\"_blank\\\">Blog: Node Buffer API fix</a></li>\\n<li><a href=\\\"https://github.com/ChALkeR/notes/blob/master/Buffer-knows-everything.md\\\" target=\\\"_blank\\\">Blog: Information about Buffer</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->tap@5.8.0->codecov.io@0.1.6->request@2.42.0\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\ntap@5.8.0 -> false\\ncodecov.io@0.1.6 -> false\\nrequest@2.42.0 -> request@2.68.0\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"semver@1.1.4 - semver Regular Expression Denial of Service (DoS)\",\"fingerprint\":\"8a9354d11c90740f5056ab2969daf82a80111427687748ee6dd9ad8fba709e44\",\"detail\":\"<strong>Overview</strong>\\n\\n<p>The semver module uses regular expressions when parsing a version string. For a carefully crafted input, the time it takes to process these regular expressions is not linear to the length of the input. Since the semver module did not enforce a limit on the version string length, an attacker could provide a long string that would take up a large amount of resources, potentially taking a server down. This issue therefore enables a potential Denial of Service attack. This is a slightly differnt variant of a typical Regular Expression Denial of Service (<a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">ReDoS</a>) vulnerability.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Update to a version 4.3.2 or greater. From the issue description [2]: &quot;Package version can no longer be more than 256 characters long. This prevents a situation in which parsing the version number can use exponentially more time and memory to parse, leading to a potential denial of service.&quot;</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li>[1] <a href=\\\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\\\" target=\\\"_blank\\\">https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS</a></li>\\n<li>[2] <a href=\\\"https://github.com/npm/npm/releases/tag/v2.7.5\\\" target=\\\"_blank\\\">https://github.com/npm/npm/releases/tag/v2.7.5</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->npmconf@0.0.24->semver@1.1.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nnpmconf@0.0.24 -> npmconf@2.0.9\\nsemver@1.1.4 -> semver@4.3.2\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}","{\"task\":\"Snyk\",\"appname\":\"snyk-sample-data\",\"description\":\"st@0.2.4 - Directory Traversal\",\"fingerprint\":\"7a1ed3a8fa8b5b6f66cfe7b50202c6a800d30518b738dae39fd80aed1537b029\",\"detail\":\"<strong>Overview</strong>\\n\\n<p>Versions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like <code>/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code> would leak sensitive files and data from the server.</p>\\n\\n<p>As of version 0.2.5, any <code>&#39;/../&#39;</code> in the request path, urlencoded or not, will be replaced with <code>&#39;/&#39;</code>. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having <code>..</code> in url paths, as this tends to expose data that you may be surprised to be exposing.</p>\\n\\n<strong>Remediation</strong>\\n\\n<p>Upgrade to version 0.2.5 or greater.</p>\\n\\n<strong>References</strong>\\n\\n<ul>\\n<li><a href=\\\"https://github.com/isaacs/st#security-status\\\" target=\\\"_blank\\\">https://github.com/isaacs/st#security-status</a></li>\\n<li><a href=\\\"http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers\\\" target=\\\"_blank\\\">http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers</a></li>\\n</ul>\\n\",\"source\":{\"scanner\":\"Snyk\",\"file\":\"goof@0.0.3->st@0.2.4\",\"line\":null,\"code\":\"Upgrade Path:\\n\\ngoof@0.0.3 -> false\\nst@0.2.4 -> st@0.2.5\"},\"severity\":2,\"timestamp\":\"2017-08-30 20:49:18 -0700\"}"]